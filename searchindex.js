Search.setIndex({"titles": ["Algorithmic Differentiation Background", "Basic Usage", "Checkpointing", "External Functions", "Higher-Order Derivatives", "XAD - User Manual", "Introduction", "GNU Free Documentation License", "Adjoint Mode Type <code class=\"docutils literal notranslate\"><span class=\"pre\">AReal</span></code>", "CheckpointCallback", "Complex", "Exceptions", "Expressions", "Forward Mode Type <code class=\"docutils literal notranslate\"><span class=\"pre\">FReal</span></code>", "Global Functions", "Headers and Namespaces", "AD Mode Interface", "Mathematical Operations", "Smoothed Mathematical Functions", "Tape", "Version Information", "Reference", "Handling Discontinuities"], "terms": {"As": [0, 1, 2, 3, 4, 16, 22], "everi": [0, 1, 2], "comput": [0, 1, 2, 3, 4, 7, 8, 9, 11, 13, 17, 18, 19, 20], "program": [0, 7], "made": [0, 1, 7], "up": [0, 2, 4, 7, 20], "seri": 0, "simpl": [0, 1, 2, 3, 7, 14], "arithmet": [0, 8, 10, 12, 13, 17], "oper": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 19, 21], "i": [0, 2, 3, 4, 7, 8, 11, 13, 17, 19, 20], "e": [0, 1, 2, 4, 7, 8, 11, 12, 13, 17, 19, 20], "rightarrow": 0, "b": [0, 1, 4, 7], "ldot": 0, "u": 0, "v": [0, 19], "z": [0, 10], "where": [0, 2, 8, 12, 13, 15, 17, 19], "input": [0, 1, 2, 3, 4, 7, 8, 9, 18, 19], "ar": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22], "modifi": [0, 7], "stage": [0, 1, 2], "get": [0, 1, 3, 4, 7, 8, 10, 13, 19], "final": [0, 2, 3, 7], "output": [0, 1, 2, 3, 4, 7, 8, 9, 13, 19], "when": [0, 1, 2, 3, 7, 11, 12, 17, 19], "individu": [0, 2, 7], "deriv": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 14, 17, 18, 21, 22], "each": [0, 2, 7, 17], "known": [0, 7], "can": [0, 1, 2, 3, 4, 7, 9, 11, 12, 15, 18, 19, 20, 22], "recurs": [0, 2], "applic": [0, 1, 2, 3, 4, 7, 11], "chain": 0, "rule": [0, 7, 17], "thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "method": [0, 4, 19], "call": [0, 1, 4, 5, 7, 8, 9, 11, 13, 17, 19], "tangent": [0, 16, 17], "linear": [0, 16], "from": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 17, 19, 22], "revers": [0, 12], "In": [0, 1, 2, 3, 4, 7, 8, 13, 16, 17, 22], "section": [0, 1, 7, 14, 15, 18, 21], "we": [0, 1, 2, 3, 4, 7, 17], "introduc": 0, "underli": [0, 3, 8, 10, 12, 13, 16, 19], "start": [0, 1, 2, 4, 13, 19], "review": [0, 7], "tradit": 0, "often": [0, 3], "bump": [0, 2, 3], "befor": [0, 1, 2, 4, 7, 9, 13, 19], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20], "approach": [0, 1, 2], "emploi": 0, "approxim": [0, 18, 22], "That": [0, 9], "variabl": [0, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 17, 19], "one": [0, 1, 2, 4, 7, 11, 12, 13, 19], "chang": [0, 7, 10], "result": [0, 1, 2, 3, 4, 7, 8, 17, 19], "us": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22], "estim": 0, "sensit": 0, "frac": [0, 4, 18], "partial": [0, 3, 4], "f": [0, 1, 4, 7], "x": [0, 2, 3, 4, 8, 10, 13, 14, 15, 17, 18, 19, 20, 22], "bm": [0, 4], "y": [0, 1, 3, 4, 8, 13, 17, 18, 19, 20, 22], "lim_": 0, "h": [0, 4, 7], "0": [0, 1, 2, 3, 4, 7, 9, 13, 14, 17, 18, 19, 20, 22], "2h": 0, "function": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 19, 21, 22], "which": [0, 1, 2, 3, 4, 7, 13, 14, 15, 17, 19, 22], "interest": [0, 1, 4], "respect": [0, 1, 3, 7], "paramet": [0, 1, 8, 13, 14, 16, 18, 19], "vector": [0, 3, 19], "valu": [0, 1, 2, 3, 4, 9, 10, 14, 18, 19, 20, 21, 22], "argument": [0, 11, 17, 18], "denot": 0, "remain": [0, 7, 17], "first": [0, 1, 2, 3, 4, 7, 11, 18, 19, 20, 21], "equat": 0, "repres": [0, 4, 7, 10, 12, 19], "requir": [0, 2, 4, 7, 16, 19], "two": [0, 1, 4, 7, 15, 16, 17], "evalu": [0, 1], "second": [0, 1, 5, 17, 18, 21], "give": [0, 4, 7, 9, 11, 19], "central": 0, "potenti": [0, 19], "accuraci": 0, "anoth": [0, 7, 8, 11, 13, 19], "s": [0, 2, 4, 7, 8, 17, 19], "practic": [0, 2, 3, 5], "chosen": [0, 17], "small": [0, 1, 17, 22], "enough": [0, 7], "theoret": 0, "limit": [0, 2, 7], "larg": [0, 2, 4, 6, 7], "caus": 0, "detect": [0, 17], "beyond": [0, 7], "typic": [0, 4, 7, 12, 15, 16, 17, 19, 22], "numer": [0, 20], "error": [0, 8, 21], "level": 0, "clearli": [0, 7], "choic": [0, 1, 7], "impact": 0, "further": [0, 7, 19], "impli": [0, 7], "need": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 19, 22], "onc": [0, 1, 2, 9], "high": [0, 6], "overal": [0, 2, 7], "complex": [0, 5, 12, 15, 19, 21], "soon": 0, "more": [0, 2, 7], "than": [0, 1, 2, 7, 10, 12], "few": 0, "thu": [0, 1, 3, 7, 20], "ha": [0, 1, 3, 4, 7, 8, 15, 19], "perform": [0, 2, 3, 6, 8, 16, 19], "defin": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22], "dot": [0, 10], "appli": [0, 1, 3, 7, 16, 17], "assum": [0, 3], "intermedi": 0, "element": [0, 3, 4], "calcul": [0, 17, 19], "_": 0, "sum_j": 0, "v_": 0, "u_": 0, "j": [0, 7], "_j": 0, "step": [0, 1, 4, 7], "For": [0, 1, 2, 4, 5, 7, 12, 14, 15, 17, 19, 22], "mathbb": 0, "r": [0, 4, 19], "n": [0, 1, 2, 3, 4, 7, 17, 19], "m": [0, 2, 7], "all": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 19, 21, 22], "It": [0, 2, 3, 6, 7, 13, 15, 19, 20], "re": [0, 2, 3, 9, 11, 19], "time": [0, 1, 2, 7, 19], "obtain": [0, 1, 2, 3, 4, 19], "cost": 0, "constant": [0, 14], "number": [0, 1, 2, 7, 10, 12, 15, 17, 19, 20], "illustr": [0, 1, 2, 22], "sin": [0, 1, 2, 4, 8, 13, 15, 17, 19], "x_1": [0, 4], "x_2": [0, 4], "implement": [0, 2, 3, 9, 10, 17, 19, 22], "x1": [0, 1, 4, 19], "x2": [0, 1, 4, 19], "pi": 0, "2": [0, 1, 3, 4, 7, 17, 18, 19], "follow": [0, 1, 2, 3, 4, 7, 11, 16, 17, 19, 20], "figur": [0, 2, 22], "how": [0, 1, 2, 6, 7], "problem": [0, 7, 22], "On": [0, 19], "left": [0, 1, 2, 4, 18, 22], "see": [0, 1, 2, 4, 7, 14, 15, 19], "graph": 0, "tabl": 0, "right": [0, 4, 7, 8, 13, 18, 22], "initi": [0, 1, 2, 3, 4, 8, 9, 11, 13, 19], "seed": [0, 1, 4, 19], "w": [0, 4, 19], "t": [0, 1, 2, 3, 4, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19], "set": [0, 1, 2, 4, 7, 8, 10, 11, 13, 16, 19, 20, 22], "its": [0, 1, 2, 3, 4, 7, 8, 9, 13, 17, 19], "1": [0, 1, 2, 3, 4, 7, 13, 17, 18, 19, 20, 22], "while": [0, 7, 11, 19], "other": [0, 3, 5, 7, 9, 21], "next": [0, 1, 2, 4, 7, 17], "take": [0, 4, 7, 19], "sine": [0, 2, 17], "zero": [0, 3, 7, 13, 17, 19], "multipli": [0, 17], "cosin": [0, 17], "usual": [0, 17], "similarli": 0, "depend": [0, 1, 2, 3, 8, 17, 19], "both": [0, 1, 2, 4, 6, 7, 10, 13, 17], "statement": [0, 7, 8, 13, 19], "add": [0, 7], "To": [0, 1, 2, 3, 7, 19], "simpli": [0, 1, 3, 14], "ad": [0, 1, 2, 3, 4, 5, 7, 8, 12, 13, 19, 21], "sinc": [0, 2, 3, 10], "henc": [0, 2, 3, 4, 8, 19], "easili": 0, "verifi": 0, "analyt": [0, 2, 3], "backward": 0, "standard": [0, 7, 10, 15, 17, 22], "notat": 0, "bar": [0, 10], "_i": 0, "u_i": 0, "index": [0, 5], "yield": 0, "v_j": 0, "lead": [0, 2], "same": [0, 1, 2, 3, 4, 7, 8, 10, 13, 16, 17, 19], "abov": [0, 1, 7, 18], "With": [0, 3, 4], "singl": [0, 1, 2, 4, 7], "execut": [0, 1, 4], "below": [0, 3, 7, 10, 22], "walk": 0, "back": [0, 1, 2, 7, 9, 19], "full": [0, 2, 4, 7, 20], "until": [0, 7, 19], "have": [0, 1, 2, 3, 7, 8, 10, 17, 19, 22], "an": [0, 1, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 22], "Then": [0, 3], "also": [0, 2, 3, 4, 7, 8, 10, 12, 13, 15, 17, 19], "were": [0, 7], "nest": [0, 2, 4, 16, 21], "principl": 0, "describ": [0, 1, 3, 4, 6, 7, 16, 20, 21], "over": [0, 5, 16], "extend": 0, "ani": [0, 1, 6, 7, 9, 12, 14, 19], "xad": [1, 2, 3, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22], "order": [1, 3, 5, 6, 7, 8, 12, 17, 19, 21, 22], "exampl": [1, 5, 7, 12, 19, 22], "choos": [1, 2, 7], "4": [1, 2, 7, 20], "doubl": [1, 2, 3, 4, 8, 10, 12, 13, 16, 17, 19, 22], "x0": [1, 4], "x3": [1, 4], "co": [1, 4, 17], "tan": [1, 4, 17], "c": [1, 3, 4, 6, 7, 10, 12, 17, 18, 22], "return": [1, 3, 4, 8, 10, 11, 12, 13, 14, 17, 18, 19], "point": [1, 2, 3, 4, 9, 15, 18, 19, 21, 22], "5": [1, 4, 7, 17, 18, 20], "3": [1, 4, 7], "differenti": [1, 2, 3, 4, 5, 6, 12, 13, 16, 22], "must": [1, 7, 10, 17, 19], "independ": [1, 2, 3, 4, 7, 13, 19], "data": [1, 2, 3, 4, 8, 10, 12, 13, 14, 15, 16, 17, 19], "type": [1, 2, 3, 4, 5, 10, 11, 12, 14, 15, 16, 17, 21], "them": [1, 3, 4, 7, 17, 19], "provid": [1, 7, 10, 15, 16, 17, 19, 22], "occurr": 1, "done": [1, 3, 10], "wai": [1, 7], "directli": [1, 3, 4, 7, 19], "given": [1, 2, 3, 4, 7, 8, 9, 13, 17, 19, 22], "desir": [1, 3], "freal": [1, 3, 4, 5, 10, 12, 14, 16, 21], "areal": [1, 2, 3, 4, 5, 10, 11, 12, 14, 16, 19, 21], "templat": [1, 2, 3, 4, 8, 9, 10, 13, 16, 19, 21], "so": [1, 2, 3, 7, 12, 15, 17], "includ": [1, 3, 4, 7, 10, 12, 15, 17, 20], "origin": [1, 3, 7, 18, 22], "tutori": 1, "becom": 1, "class": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 16, 19], "mean": [1, 7, 19], "definit": [1, 7, 19, 22], "algorithm": [1, 5, 12], "declar": [1, 3, 19], "appropri": [1, 7], "conveni": [1, 2, 16, 17, 19], "typedef": [1, 2, 3, 4, 8, 13, 16, 19], "select": 1, "detail": [1, 7, 19], "interfac": [1, 3, 4, 5, 6, 8, 10, 13, 19, 21], "fwd": [1, 16], "active_typ": [1, 2, 3, 4, 16, 19], "our": [1, 2, 3], "assign": [1, 3, 14], "new": [1, 2, 3, 4, 7, 8, 13, 19], "x0_ad": [1, 4], "x1_ad": [1, 4], "x2_ad": [1, 4], "x3_ad": [1, 4], "now": [1, 2, 3, 4], "global": [1, 2, 5, 8, 12, 13, 19, 21], "work": [1, 4, 7, 8, 13, 15, 17], "altern": [1, 2, 7, 17, 19], "could": [1, 2, 3, 7], "member": [1, 2, 3, 7, 21], "setderiv": [1, 8, 10, 13, 19], "At": [1, 3], "readi": 1, "well": [1, 7, 10, 12, 17], "access": [1, 4, 7, 10, 16], "getderiv": [1, 8, 10, 13, 19], "getvalu": [1, 8, 13], "code": [1, 3, 6, 7, 14, 19, 22], "consol": 1, "std": [1, 2, 3, 4, 10, 11, 15, 17, 19], "cout": [1, 2, 3, 4, 19], "dy": [1, 3, 4, 19], "dx0": [1, 4], "fwd_1st": 1, "automat": [1, 2, 4, 6, 7, 10, 17, 19], "natur": [1, 17], "hand": [1, 3, 8, 13], "multipl": [1, 7, 19], "four": [1, 7, 17], "tape": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 21], "record": [1, 2, 3, 4, 8], "dure": [1, 2, 3, 8, 9, 19], "valuat": 1, "after": [1, 4, 7, 19], "roll": [1, 2, 9, 19], "structur": [1, 2, 4, 16], "adj": [1, 16], "tape_typ": [1, 2, 3, 4, 8, 16, 19], "initialis": 1, "default": [1, 18], "constructor": [1, 2, 8, 13, 19], "creat": [1, 2, 3, 7, 8, 11, 12, 19, 22], "current": [1, 8, 11, 19], "thread": [1, 6, 8, 11, 19], "ensur": [1, 3, 7, 8, 13, 19], "safeti": [1, 6, 19], "own": [1, 19], "regist": [1, 2, 3, 4, 8, 9, 19], "registerinput": [1, 2, 4, 19], "note": [1, 2, 4, 10, 12, 17, 19, 22], "onli": [1, 2, 7, 8, 10, 11, 12, 19], "run": [1, 2, 4], "newrecord": [1, 2, 3, 4, 19], "wit": 1, "explain": [1, 4, 7], "registeroutput": [1, 2, 3, 4, 19], "free": [1, 5, 8, 13, 19], "refer": [1, 4, 5, 7, 8, 9, 10, 13, 14, 15, 17, 19, 22], "store": [1, 2, 3, 8, 9, 13, 14, 17, 19], "setadjoint": [1, 8, 10], "purpos": [1, 2, 4, 7], "what": [1, 2, 7, 11], "interpret": [1, 4, 19], "computeadjoint": [1, 4, 9, 11, 19], "via": 1, "dx1": [1, 4, 19], "dx2": [1, 4, 19], "dx3": [1, 4], "adj_1st": 1, "less": [1, 2, 4, 7], "should": [1, 2, 3, 7, 8, 9, 10, 13, 15, 19], "prefer": 1, "howev": [1, 2, 7, 17], "g": [1, 7, 12, 17, 20], "memori": [1, 2, 3, 6], "avoid": [1, 19], "experiment": 1, "advis": 1, "find": [1, 12, 17], "optim": 1, "techniqu": [2, 3, 4], "reduc": [2, 4], "footprint": 2, "adjoint": [2, 5, 6, 9, 10, 11, 12, 16, 19, 21], "mode": [2, 5, 6, 10, 11, 12, 19, 21], "instead": [2, 10, 19], "quickli": 2, "gigabyt": 2, "specif": [2, 7, 12, 14, 19], "divid": 2, "passiv": [2, 3, 8, 13, 14, 16, 17], "without": [2, 7, 8, 11, 13, 17, 19, 20], "rollback": [2, 3], "load": [2, 3], "increment": [2, 3, 8, 19], "wipe": 2, "proceed": 2, "previou": [2, 7], "amount": [2, 4, 7], "forward": [2, 5, 6, 10, 12, 16, 21], "twice": 2, "trade": 2, "higher": [2, 3, 5, 12, 17, 19, 22], "cach": 2, "effici": 2, "mai": [2, 3, 7, 9, 19, 22], "faster": 2, "even": [2, 17], "though": 2, "demonstr": [2, 4], "repeat": [2, 19], "void": [2, 3, 7, 8, 9, 10, 13, 16, 19], "repeated_sin": 2, "int": [2, 3, 12, 17], "loop": [2, 3], "equidist": 2, "insert": [2, 3, 7, 19], "slot": [2, 3, 8, 9, 19], "object": [2, 3, 8, 9, 11, 13, 19], "inherit": [2, 11, 12], "checkpointcallback": [2, 3, 5, 11, 19, 21], "virtual": [2, 3, 9], "overridden": 2, "per": 2, "ident": [2, 7], "within": [2, 3, 7, 9, 19, 22], "stack": [2, 19], "prototyp": [2, 3], "sincheckpointcallback": 2, "public": [2, 3, 7, 8, 11, 13], "typenam": [2, 3, 8, 9, 10, 12, 13, 16, 19], "slot_typ": [2, 3, 8, 19], "value_typ": [2, 3, 8, 12, 13, 16, 19], "overrid": [2, 3], "privat": [2, 3], "n_": 2, "iter": [2, 19], "x_": 2, "slots_": 2, "outsid": [2, 3, 22], "push": [2, 19], "getslot": [2, 3], "x_p": [2, 3], "activ": [2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 16, 17, 19], "updat": [2, 3, 7, 19], "did": 2, "here": [2, 4, 7, 17], "had": [2, 7], "do": [2, 3, 7, 8], "extern": [2, 5, 6], "alreadi": [2, 3, 7, 11, 19], "getact": [2, 3, 19], "insertcallback": [2, 3, 9, 19], "outputidx": 2, "top": 2, "pop": 2, "inputidx": 2, "outputadj": 2, "getandresetoutputadjoint": [2, 3, 19], "outputslot": 2, "read": [2, 4, 7, 10], "correspond": [2, 3, 4, 9, 19], "reset": [2, 3, 9, 19], "gener": [2, 3, 7, 11, 14, 15, 19, 22], "overwritten": 2, "case": [2, 3, 7, 11, 12, 16, 19], "want": 2, "just": [2, 7], "local": [2, 19], "scopednestedrecord": [2, 19], "x_ad": [2, 3], "output_adj": [2, 3], "incrementadjoint": [2, 3, 19], "inputslot": 2, "incr": 2, "similar": [2, 4, 7, 15, 17], "fashion": [2, 3, 4], "wrap": [2, 3], "newnestedrecord": [2, 19], "endnestedrecord": [2, 19], "destructor": [2, 8, 19], "recommend": [2, 4, 7, 19], "make": [2, 3, 7], "sure": [2, 3], "alwai": [2, 19], "finish": 2, "scope": 2, "goe": 2, "out": [2, 11, 12], "reus": [2, 3], "save": 2, "indeped": 2, "chkpt": 2, "setup": [2, 4], "checkpt_dist": 2, "min": [2, 18, 21, 22], "xout": 2, "dxout": 2, "dxin": 2, "procedur": [2, 3], "import": [2, 4, 15, 17], "valid": [2, 19], "destroi": [2, 3, 19], "manag": [2, 3, 6, 14], "base": [2, 3, 6, 7, 9, 11, 17], "destruct": [2, 3], "dynam": [2, 3, 19], "alloc": [2, 3, 19], "outer": [2, 4, 16], "finit": [2, 3, 5, 17], "differ": [2, 3, 4, 5, 7, 16, 17, 19], "librari": [2, 3, 6, 17], "benefit": [2, 22], "highli": 2, "part": [3, 7, 10, 17, 21], "avail": [3, 6, 7], "sourc": [3, 6, 22], "routin": 3, "math": [3, 8, 13, 15, 17, 18, 21, 22], "reimplement": 3, "develop": 3, "effort": 3, "reason": [3, 7, 15], "manual": [3, 4, 6, 7, 19], "some": [3, 7, 11], "form": [3, 7], "achiev": 3, "either": [3, 7, 10], "possibl": 3, "integr": [3, 6, 17], "critic": 3, "tune": 3, "pick": 3, "length": 3, "multi": 3, "dimension": 3, "sqrt": [3, 17], "sum_0": 3, "x_i": 3, "goal": 3, "xsqr": 3, "sum_el": 3, "const": [3, 8, 10, 11, 12, 13, 14, 19], "convert": [3, 17], "plain": [3, 7], "continu": [3, 7, 11], "checkpoint": [3, 5, 6, 8, 9], "callback": [3, 5, 9], "propag": [3, 9, 13, 19], "put": [3, 7], "least": [3, 7, 11, 13, 19], "place": [3, 7, 19], "look": 3, "like": [3, 8, 13, 15, 17, 19], "externalsumelementscallback": 3, "inputslots_": 3, "outputslot_": 3, "arbitrari": 3, "good": 3, "allow": [3, 4, 7, 10, 16, 18, 19], "too": [3, 7], "keep": [3, 19], "inform": [3, 5, 9, 12, 21], "push_back": 3, "copi": [3, 7, 8, 10, 13], "later": [3, 7, 19], "ret": 3, "request": [3, 7], "sum": 3, "straightforward": 3, "equal": [3, 7], "size": [3, 19], "necessari": 3, "been": [3, 7, 8, 10, 15, 19], "overwrit": 3, "overload": [3, 6, 19], "creation": [3, 19], "ckp": 3, "pushcallback": [3, 19], "let": [3, 19], "through": [3, 7, 13, 20], "leak": 3, "If": [3, 7, 8, 14, 19], "wa": [3, 7, 11, 19], "elsewher": 3, "would": 3, "redirect": 3, "futur": [3, 7], "hold": [3, 7], "dx": [3, 4], "exactli": [3, 17], "external_funct": 3, "involv": [3, 8, 11, 12, 13], "togeth": [3, 7], "y_p": 3, "extract": [3, 7], "end": [3, 4, 7, 18, 19], "easi": [4, 10], "third": 4, "basic": [4, 5, 16], "usag": [4, 5, 19], "row": 4, "hessian": 4, "matrix": 4, "begin": [4, 7, 18], "arrai": [4, 18], "cccc": 4, "x_0": 4, "x_3": 4, "6pt": 4, "symmetr": 4, "fwd_adj": [4, 16], "actual": [4, 7], "inner": [4, 10, 16, 19], "And": 4, "again": [4, 9, 19], "d2y": 4, "dx0dx0": 4, "dx0dx1": 4, "dx0dx2": 4, "dx0dx3": 4, "unwrap": [4, 12], "7": [4, 7], "69565": 4, "21205": 4, "16": 4, "2093": 4, "24": 4, "8681": 4, "14": 4, "4253": 4, "327326": 4, "21352": 4, "342613": 4, "198741": 4, "fwd_adj_2nd": 4, "thei": [4, 7, 10, 17, 22], "briefli": 4, "One": 4, "sequenc": 4, "retriev": [4, 8], "dxdx": 4, "due": 4, "symmetri": 4, "adj_adj": [4, 16], "inner_tape_typ": [4, 16], "outer_tape_typ": [4, 16], "introduct": 5, "background": 5, "prerequisit": 5, "replac": [5, 7, 12, 22], "best": 5, "site": [5, 7], "pattern": [5, 12], "handl": [5, 19], "discontinu": [5, 18], "header": [5, 10, 17, 21], "namespac": [5, 10, 17, 21], "express": [5, 8, 13, 21], "mathemat": [5, 7, 8, 10, 12, 13, 14, 21, 22], "smooth": [5, 21, 22], "except": [5, 6, 7, 9, 19, 21], "version": [5, 7, 8, 13, 18, 21], "gnu": 5, "document": 5, "licens": [5, 6], "fast": 6, "comprehens": 6, "open": 6, "target": 6, "product": 6, "qualiti": 6, "scale": 6, "strive": 6, "eas": 6, "kei": 6, "featur": 6, "support": [6, 8, 13], "safe": 6, "formal": 6, "guarante": [6, 9, 11, 17, 19], "battl": 6, "test": 6, "aad": 6, "train": 6, "consult": 6, "commerci": [6, 7], "xcelerit": 6, "your": [6, 7], "project": 6, "novemb": 7, "2008": 7, "copyright": 7, "2000": 7, "2001": 7, "2002": 7, "2007": 7, "softwar": 7, "foundat": 7, "inc": 7, "http": 7, "fsf": 7, "org": 7, "everyon": 7, "permit": 7, "distribut": 7, "verbatim": 7, "preambl": 7, "textbook": 7, "sens": 7, "freedom": 7, "assur": 7, "effect": 7, "redistribut": 7, "noncommerci": 7, "secondarili": 7, "preserv": 7, "author": 7, "publish": 7, "credit": 7, "being": 7, "consid": [7, 17, 19], "respons": [7, 9, 19], "modif": 7, "kind": 7, "copyleft": 7, "themselv": 7, "complement": 7, "design": 7, "becaus": 7, "come": 7, "doe": [7, 16, 19], "But": 7, "textual": 7, "regardless": 7, "subject": 7, "matter": 7, "whether": 7, "print": [7, 19], "book": 7, "princip": 7, "whose": 7, "instruct": 7, "AND": 7, "medium": 7, "contain": 7, "notic": 7, "holder": 7, "sai": 7, "under": 7, "term": 7, "Such": 7, "grant": 7, "world": 7, "wide": 7, "royalti": 7, "unlimit": 7, "durat": 7, "condit": [7, 8, 22], "state": [7, 9, 11, 19], "herein": 7, "license": 7, "address": 7, "you": 7, "accept": [7, 11], "permiss": 7, "law": 7, "A": [7, 8, 13, 19, 22], "portion": 7, "translat": 7, "languag": 7, "secondari": 7, "name": [7, 17], "appendix": 7, "front": 7, "deal": [7, 12], "exclus": 7, "relationship": 7, "relat": 7, "noth": 7, "fall": 7, "histor": 7, "connect": 7, "legal": 7, "philosoph": 7, "ethic": 7, "polit": 7, "posit": [7, 17, 19], "regard": 7, "invari": 7, "certain": 7, "titl": 7, "those": 7, "releas": [7, 8, 20], "fit": 7, "identifi": 7, "none": 7, "cover": 7, "text": [7, 18], "short": 7, "passag": 7, "list": [7, 14, 17], "most": 7, "word": 7, "25": 7, "transpar": [7, 12], "machin": 7, "readabl": 7, "format": 7, "suitabl": 7, "revis": 7, "straightforwardli": 7, "editor": 7, "imag": [7, 10], "compos": 7, "pixel": 7, "paint": 7, "draw": 7, "formatt": 7, "varieti": 7, "otherwis": [7, 8, 17, 19], "file": 7, "markup": 7, "absenc": 7, "arrang": 7, "thwart": 7, "discourag": 7, "subsequ": [7, 19], "reader": 7, "substanti": 7, "opaqu": [7, 19], "ascii": 7, "texinfo": 7, "latex": 7, "sgml": 7, "xml": 7, "publicli": 7, "dtd": 7, "conform": 7, "html": 7, "postscript": 7, "pdf": 7, "human": 7, "png": 7, "xcf": 7, "jpg": 7, "proprietari": 7, "edit": 7, "processor": 7, "process": 7, "tool": 7, "produc": 7, "page": 7, "itself": [7, 9, 12, 14, 19], "plu": 7, "legibl": 7, "materi": 7, "appear": 7, "promin": 7, "preced": 7, "bodi": 7, "person": 7, "entiti": 7, "entitl": 7, "xyz": 7, "subunit": 7, "precis": [7, 17], "parenthes": 7, "stand": 7, "mention": 7, "acknowledg": 7, "dedic": 7, "endors": 7, "histori": 7, "accord": 7, "warranti": 7, "disclaim": 7, "These": [7, 16, 22], "implic": 7, "reproduc": 7, "whatsoev": 7, "technic": 7, "measur": 7, "obstruct": 7, "control": 7, "compens": 7, "exchang": 7, "lend": 7, "displai": 7, "IN": 7, "quantiti": 7, "media": 7, "commonli": [7, 15], "100": [7, 20], "enclos": 7, "carri": 7, "present": 7, "visibl": 7, "addit": [7, 8, 10, 13, 15, 17], "long": [7, 17], "satisfi": 7, "treat": 7, "volumin": 7, "ones": 7, "mani": [7, 22], "rest": 7, "onto": 7, "adjac": 7, "along": [7, 10], "network": 7, "locat": [7, 17], "download": 7, "protocol": 7, "complet": 7, "latter": 7, "option": 7, "prudent": 7, "year": 7, "last": [7, 19], "agent": 7, "retail": 7, "contact": 7, "chanc": 7, "fill": 7, "role": 7, "whoever": 7, "possess": 7, "thing": 7, "distinct": 7, "authorship": 7, "five": 7, "fewer": 7, "unless": 7, "d": 7, "immedi": 7, "shown": 7, "addendum": 7, "unalt": 7, "item": 7, "sentenc": 7, "likewis": 7, "omit": [7, 15], "k": 7, "substanc": 7, "tone": 7, "contributor": 7, "therein": 7, "l": 7, "equival": [7, 18, 22], "delet": 7, "retitl": 7, "exist": [7, 17, 22], "conflict": 7, "o": [7, 8, 13], "appendic": 7, "qualifi": [7, 17], "variou": 7, "parti": 7, "peer": 7, "approv": 7, "organ": 7, "authorit": 7, "previous": 7, "act": 7, "behalf": 7, "old": 7, "explicit": [7, 19], "assert": 7, "combin": 7, "unmodifi": 7, "content": [7, 19], "uniqu": 7, "els": 7, "adjust": [7, 10], "6": 7, "collect": 7, "OF": 7, "consist": [7, 13], "aggreg": 7, "WITH": 7, "compil": [7, 17], "separ": 7, "volum": 7, "storag": 7, "user": [7, 9, 10, 11, 12, 19, 21], "half": 7, "entir": 7, "bracket": 7, "electron": 7, "whole": 7, "8": 7, "special": [7, 12], "english": 7, "disagr": 7, "between": 7, "prevail": 7, "9": 7, "termin": 7, "sublicens": 7, "expressli": 7, "attempt": [7, 11], "ceas": 7, "violat": 7, "particular": 7, "reinstat": 7, "provision": 7, "explicitli": 7, "perman": 7, "fail": 7, "notifi": 7, "prior": 7, "60": 7, "dai": 7, "cessat": 7, "moreov": 7, "receiv": 7, "cure": 7, "30": 7, "receipt": 7, "who": 7, "10": [7, 17], "spirit": 7, "concern": 7, "www": 7, "distinguish": 7, "specifi": [7, 17], "draft": 7, "ever": 7, "proxi": 7, "decid": 7, "11": [7, 10], "relicens": 7, "massiv": 7, "multiauthor": 7, "collabor": 7, "mmc": 7, "web": 7, "server": 7, "facil": 7, "anybodi": 7, "wiki": 7, "cc": 7, "BY": 7, "sa": 7, "creativ": 7, "common": 7, "attribut": 7, "share": 7, "alik": 7, "corpor": 7, "profit": 7, "busi": 7, "san": 7, "francisco": 7, "california": 7, "incorpor": 7, "republish": 7, "elig": 7, "somewher": 7, "august": 7, "2009": 7, "written": [7, 22], "line": 7, "THEIR": 7, "three": 7, "merg": 7, "suit": 7, "situat": 7, "nontrivi": 7, "parallel": 7, "track": [8, 13, 19], "problemat": 8, "instanc": [8, 13, 19], "val": [8, 13], "undefin": [8, 9, 11, 19], "behaviour": [8, 19], "check": [8, 17, 19], "debug": [8, 11, 19], "build": 8, "throw": [8, 9, 11, 19], "notapeexcept": [8, 11, 21], "move": [8, 13, 19], "expr": [8, 13], "side": [8, 13], "outofrang": [8, 11, 19, 21], "yet": 8, "synonym": [8, 17], "bool": [8, 12, 17, 19], "shouldrecord": 8, "therefor": [8, 12, 17], "friend": [8, 13], "tapetyp": [9, 19], "associ": [9, 12, 14, 19], "reach": [9, 19], "Their": 9, "weak": [9, 11], "specialis": [10, 15], "hpp": [10, 15, 17], "placehold": 10, "xreal": 10, "real": 10, "rather": [10, 12], "real_deriv": 10, "imag_deriv": 10, "imaginari": 10, "alia": 10, "getadjoint": 10, "stream": 10, "write": 10, "mostli": 11, "strong": [11, 19], "unchang": [11, 19], "recov": 11, "notabl": 11, "runtime_error": 11, "char": 11, "messag": 11, "tapealreadyact": [11, 19, 21], "thrown": [11, 19], "rang": [11, 19], "derivativesnotiniti": [11, 19, 21], "crtp": 12, "static": [12, 19], "polymorph": 12, "float": [12, 15, 16, 21], "seamlessli": 12, "comparison": 12, "about": 12, "context": 12, "custom": 12, "enum": 12, "direct": [12, 17], "indic": 12, "enumer": 12, "dir_non": 12, "Not": 12, "dir_forward": 12, "dir_revers": 12, "exprtrait": 12, "main": 12, "isexpr": 12, "true": [12, 17, 19], "fact": 12, "numvari": 12, "port": 12, "isforward": 12, "boolean": 12, "isrevers": 12, "isliter": 12, "elementari": 12, "nested_typ": 12, "layer": 12, "scalar_typ": 12, "scalar": [12, 19], "der": 13, "especi": 14, "breviti": 15, "client": [15, 19], "There": 15, "demand": 15, "wherev": 15, "stdcompat": [15, 17], "compat": 15, "enabl": 15, "construct": [15, 22], "addition": 15, "numeric_limit": 15, "trait": [15, 21], "passive_typ": 16, "inner_typ": 16, "fwd_fwd": 16, "adj_fwd": 16, "adl": 17, "lookup": 17, "unqualifi": 17, "fulli": 17, "expect": 17, "ab": [17, 18, 22], "maximum": 17, "fmax": 17, "minimum": 17, "fmin": 17, "floor": 17, "toward": 17, "neg": 17, "infin": 17, "ceil": 17, "trunc": 17, "nearest": 17, "integ": [17, 19], "lround": 17, "llround": 17, "fmod": 17, "remaind": 17, "divis": 17, "fraction": 17, "truncat": 17, "ieee": 17, "exact": 17, "contrast": 17, "sign": 17, "remquo": 17, "factor": 17, "modf": 17, "iptr": 17, "decompos": 17, "nextaft": 17, "represent": [17, 20], "mathmat": 17, "veri": 17, "accordingli": 17, "degre": 17, "radian": 17, "asin": 17, "invers": 17, "aco": 17, "atan": 17, "atan2": 17, "quadrant": 17, "sinh": 17, "hyperbol": 17, "cosh": 17, "tanh": 17, "asinh": 17, "acosh": 17, "atanh": 17, "log": 17, "log10": 17, "log2": 17, "exp": 17, "expm1": 17, "around": [17, 18, 22], "exp2": 17, "log1p": 17, "squar": 17, "root": 17, "cbrt": 17, "cubic": 17, "pow": 17, "ldexp": 17, "frexp": 17, "arg": 17, "normalis": 17, "ilogb": 17, "flt_radix": 17, "scalbn": 17, "erf": 17, "erfc": 17, "complementari": 17, "isinf": 17, "isnan": 17, "nan": 17, "isfinit": 17, "infinit": 17, "signbit": 17, "fals": 17, "bit": 17, "isnorm": 17, "normal": 17, "subnorm": 17, "smooth_ab": [18, 21, 22], "001": [18, 22], "_ab": 18, "lll": 18, "5pt": 18, "leq": 18, "cut": 18, "off": 18, "spline": [18, 22], "area": [18, 22], "absolut": [18, 21], "smooth_max": [18, 21, 22], "max": [18, 21, 22], "_max": 18, "smooth_min": [18, 21], "_min": 18, "turn": 19, "12": 19, "usabl": 19, "size_typ": 19, "position_typ": 19, "callback_typ": 19, "copyabl": 19, "pointer": 19, "instanti": 19, "deactiv": 19, "null": 19, "isact": 19, "nullptr": 19, "inp": 19, "non": [19, 20, 21], "getposit": 19, "intern": [19, 21], "reli": 19, "upon": 19, "posiiton": 19, "clearderivativesaft": 19, "resetto": 19, "computeadjointsto": 19, "po": 19, "clear": 19, "discard": 19, "postion": 19, "longer": 19, "stop": 19, "clearal": 19, "info": 19, "bring": 19, "leav": 19, "untouch": 19, "gain": 19, "compar": 19, "path": [19, 20], "wise": 19, "mont": 19, "carlo": 19, "clearderiv": 19, "printstatu": 19, "stdout": 19, "size_t": 19, "getmemori": 19, "byte": 19, "occupi": 19, "cb": 19, "ownership": 19, "api": 19, "intend": 19, "forget": 19, "raii": 19, "de": 19, "stateless": 19, "getlastcallback": 19, "empti": 19, "getnumcallback": 19, "havecallback": 19, "popcallback": 19, "remov": 19, "gettap": 19, "queri": 20, "preprocessor": 20, "macro": 20, "xad_version_major": [20, 21], "major": 20, "xad_version_minor": [20, 21], "minor": 20, "xad_version_patch": [20, 21], "charact": 20, "0rc1": 20, "xad_version_patchstr": [20, 21], "string": 20, "patch": 20, "suffix": 20, "xad_vers": [20, 21], "candiat": 20, "beta": 20, "xad_major": 20, "10000": 20, "xad_minor": 20, "xad_patch": 20, "xad_version_str": [20, 21], "exclud": 21, "pure": 21, "overview": 21, "round": 21, "trigonometr": 21, "power": 21, "exponenti": 21, "logarithm": 21, "classif": 21, "jump": 22, "averag": 22, "accur": 22, "hidden": 22, "strike": 22}, "objects": {"": [[20, 0, 1, "c.XAD_VERSION", "XAD_VERSION", "Numeric representation of the full XAD Version number (without non-numeric suffixes e.g. for release candiates and betas). It is computed as:"], [20, 0, 1, "c.XAD_VERSION_MAJOR", "XAD_VERSION_MAJOR", "Numeric value of the XAD major version number, i.e. 1 for 1.x.y."], [20, 0, 1, "c.XAD_VERSION_MINOR", "XAD_VERSION_MINOR", "Numeric value of the XAD minor version number, i.e. 4 for x.4.y."], [20, 0, 1, "c.XAD_VERSION_PATCH", "XAD_VERSION_PATCH", "Numeric value of the XAD path version number, up to the first non-numeric character. Thus, for 1.0.0rc1, the value of this macro is 0."], [20, 0, 1, "c.XAD_VERSION_PATCHSTRING", "XAD_VERSION_PATCHSTRING", "String representation of the XAD patch version number, including non-numeric suffixes."], [20, 0, 1, "c.XAD_VERSION_STRING", "XAD_VERSION_STRING", "String representation of the full XAD version, including non-numeric suffixes, e.g. 1.5.0rc1"], [8, 1, 1, "_CPPv4I0E5AReal", "AReal", "Defines and active data type version of the underlying type T that tracks derivatives on a tape for adjoint computation."], [8, 2, 1, "_CPPv4N5AReal5ARealERK10ExpressionI1T4ExprE", "AReal::AReal", "Construct from an expression. This constructor gets called from statements like this, where the right-hand side involves and active data type:"], [8, 2, 1, "_CPPv4N5AReal5ARealERK1T", "AReal::AReal", "Constructs a new instance of this class, given its initial passive value."], [8, 2, 1, "_CPPv4N5AReal5ARealERK5AReal", "AReal::AReal", "Copy-constructor"], [8, 2, 1, "_CPPv4N5AReal5ARealERR5AReal", "AReal::AReal", "Move-constructor"], [8, 3, 2, "_CPPv4N5AReal5ARealERK10ExpressionI1T4ExprE-p-expr", "AReal::AReal::expr", "The expression to construct from"], [8, 3, 2, "_CPPv4N5AReal5ARealERR5AReal-p-o", "AReal::AReal::o", "Other object to move from"], [8, 3, 2, "_CPPv4N5AReal5ARealERK1T-p-val", "AReal::AReal::val", "Value to initialize the  the instance with."], [8, 3, 2, "_CPPv4N5AReal5ARealERK5AReal-p-val", "AReal::AReal::val", "Value to initialize the instance with."], [8, 4, 2, "_CPPv4I0E5AReal", "AReal::T", "Defines and active data type version of the underlying type T that tracks derivatives on a tape for adjoint computation."], [8, 2, 1, "_CPPv4N5AReal10derivativeEv", "AReal::derivative", "Get a reference to the stored derivative of this object, i.e., it is assignable."], [8, 2, 1, "_CPPv4NK5AReal10derivativeEv", "AReal::derivative", "Get a const reference to the stored derivative of this object."], [8, 2, 1, "_CPPv4NK5AReal13getDerivativeEv", "AReal::getDerivative", "Get the stored derivative of this object."], [8, 2, 1, "_CPPv4NK5AReal8getValueEv", "AReal::getValue", "Get the value of this object, as the underlying type."], [8, 2, 1, "_CPPv4N5ARealaSERK10ExpressionI1T4ExprE", "AReal::operator=", "Assign an expression"], [8, 2, 1, "_CPPv4N5ARealaSERK1T", "AReal::operator=", "Assign from a passive value."], [8, 2, 1, "_CPPv4N5ARealaSERK5AReal", "AReal::operator=", "Assign from another AReal object."], [8, 2, 1, "_CPPv4N5ARealaSERR5AReal", "AReal::operator=", "Move-assignment"], [8, 3, 2, "_CPPv4N5ARealaSERK10ExpressionI1T4ExprE-p-expr", "AReal::operator=::expr", "Expression to be assigned to this object."], [8, 3, 2, "_CPPv4N5ARealaSERK1T-p-val", "AReal::operator=::val", "Value to be assigned to this object."], [8, 3, 2, "_CPPv4N5ARealaSERK5AReal-p-val", "AReal::operator=::val", "Value to be assigned to this object."], [8, 3, 2, "_CPPv4N5ARealaSERR5AReal-p-val", "AReal::operator=::val", "Value to be moved into this object"], [8, 2, 1, "_CPPv4N5AReal10setAdjointERK1T", "AReal::setAdjoint", "Synonym for setDerivative(a)."], [8, 3, 2, "_CPPv4N5AReal10setAdjointERK1T", "AReal::setAdjoint::a", "Synonym for setDerivative(a)."], [8, 2, 1, "_CPPv4N5AReal13setDerivativeERK1T", "AReal::setDerivative", "Sets the derivative of this object. This is the same as calling derivative() = a."], [8, 3, 2, "_CPPv4N5AReal13setDerivativeERK1T-p-a", "AReal::setDerivative::a", "The value to assign to the derivative."], [8, 2, 1, "_CPPv4NK5AReal12shouldRecordEv", "AReal::shouldRecord", "Checks if the variable has been registered with a tape and should therefore be recorded."], [8, 5, 1, "_CPPv4N5AReal9slot_typeE", "AReal::slot_type", "The type used for storing this instance's slot in the tape. This type is useful for checkpointing, where the slot of the inputs and outputs needs to be stored in the checkpoint in order to retrieve or increment their derivatives during adjoint computation."], [8, 5, 1, "_CPPv4N5AReal9tape_typeE", "AReal::tape_type", "The type of the tape that is used to store operations on this class."], [8, 2, 1, "_CPPv4N5AReal5valueEv", "AReal::value", "Get a reference to the value of this object, i.e. it is assignable"], [8, 2, 1, "_CPPv4NK5AReal5valueEv", "AReal::value", "Get a const reference to the value of this object."], [8, 5, 1, "_CPPv4N5AReal10value_typeE", "AReal::value_type", "The value-type of this class, i.e., T."], [8, 2, 1, "_CPPv4N5ARealD0Ev", "AReal::~AReal", "Destructor."], [9, 1, 1, "_CPPv4I0E18CheckpointCallback", "CheckpointCallback", "Base class of any checkpoint callbacks associated with the given TapeType."], [9, 4, 2, "_CPPv4I0E18CheckpointCallback", "CheckpointCallback::TapeType", "Base class of any checkpoint callbacks associated with the given TapeType."], [9, 2, 1, "_CPPv4N18CheckpointCallback14computeAdjointEP8TapeType", "CheckpointCallback::computeAdjoint", "This function is called by XAD during rolling back the tape, giving a reference to itself. Gives weak exception guarantee - if this user-implemented function throws an exception, the tape is in an undefined state and needs to be reset/re-initialized before it can be used again."], [9, 3, 2, "_CPPv4N18CheckpointCallback14computeAdjointEP8TapeType", "CheckpointCallback::computeAdjoint::tape", "This function is called by XAD during rolling back the tape, giving a reference to itself. Gives weak exception guarantee - if this user-implemented function throws an exception, the tape is in an undefined state and needs to be reset/re-initialized before it can be used again."], [12, 6, 1, "_CPPv4N9Direction11DIR_FORWARDE", "DIR_FORWARD", "Forward mode AD type"], [12, 6, 1, "_CPPv4N9Direction8DIR_NONEE", "DIR_NONE", "Not an algorithmic differentiation type"], [12, 6, 1, "_CPPv4N9Direction11DIR_REVERSEE", "DIR_REVERSE", "Reverse mode AD type"], [11, 1, 1, "_CPPv425DerivativesNotInitialized", "DerivativesNotInitialized", "Exception thrown if adjoints are attempted to be computed without setting at least one derivative first."], [12, 7, 1, "_CPPv49Direction", "Direction", "Enum to indicate the direction of algorithmic differentiation associated with a type."], [12, 6, 1, "_CPPv4N9Direction11DIR_FORWARDE", "Direction::DIR_FORWARD", "Forward mode AD type"], [12, 6, 1, "_CPPv4N9Direction8DIR_NONEE", "Direction::DIR_NONE", "Not an algorithmic differentiation type"], [12, 6, 1, "_CPPv4N9Direction11DIR_REVERSEE", "Direction::DIR_REVERSE", "Reverse mode AD type"], [11, 1, 1, "_CPPv49Exception", "Exception", "Base class of all XAD exceptions"], [11, 2, 1, "_CPPv4NK9Exception4whatEv", "Exception::what", "Returns the message of the exception (inherited from std::runtime_error)"], [12, 1, 1, "_CPPv4I0E10ExprTraits", "ExprTraits", "Main traits class to find out information about an expression type."], [12, 4, 2, "_CPPv4I0E10ExprTraits", "ExprTraits::T", "Main traits class to find out information about an expression type."], [12, 8, 1, "_CPPv4N10ExprTraits6isExprE", "ExprTraits::isExpr", "True if the type is in fact an expression (or any XAD active variable)"], [12, 8, 1, "_CPPv4N10ExprTraits9isForwardE", "ExprTraits::isForward", "Boolean to represent if forward-mode AD"], [12, 8, 1, "_CPPv4N10ExprTraits9isLiteralE", "ExprTraits::isLiteral", "True if type is an elementary AD type (e.g. AReal)"], [12, 8, 1, "_CPPv4N10ExprTraits9isReverseE", "ExprTraits::isReverse", "Boolean to represent if adjoint mode AD"], [12, 5, 1, "_CPPv4N10ExprTraits11nested_typeE", "ExprTraits::nested_type", "The underlying double type of the expression, e.g. double for AReal<double>, or AReal<FReal<double>> (unwrapping all layers)"], [12, 8, 1, "_CPPv4N10ExprTraits12numVariablesE", "ExprTraits::numVariables", "Number of variables that are port of the expression"], [12, 5, 1, "_CPPv4N10ExprTraits11scalar_typeE", "ExprTraits::scalar_type", "The scalar type of the expression, unwrapping one layer in case of higher-order derivatives. For example, returns double for AReal<double>, and FReal<double> for AReal<FReal<double>> ."], [12, 5, 1, "_CPPv4N10ExprTraits10value_typeE", "ExprTraits::value_type", "The underlying active type of the expression, e.g. AReal<double> for a complex expression involving reverse mode active variables."], [12, 1, 1, "_CPPv4I00E10Expression", "Expression", "Represents a mathematical expression in a type. Active data types, such as AReal and FReal, as well as all mathematical expressions inherit from this class. Therefore all mathematical operations are defined on this type, rather than any specific derived class."], [12, 4, 2, "_CPPv4I00E10Expression", "Expression::Derived", "Represents a mathematical expression in a type. Active data types, such as AReal and FReal, as well as all mathematical expressions inherit from this class. Therefore all mathematical operations are defined on this type, rather than any specific derived class."], [12, 4, 2, "_CPPv4I00E10Expression", "Expression::T", "Represents a mathematical expression in a type. Active data types, such as AReal and FReal, as well as all mathematical expressions inherit from this class. Therefore all mathematical operations are defined on this type, rather than any specific derived class."], [13, 1, 1, "_CPPv4I0E5FReal", "FReal", "Defines and active data type version of the underlying type T that tracks derivatives for forward mode differentiation (without tape)"], [13, 2, 1, "_CPPv4N5FReal5FRealERK10ExpressionI1T4ExprE", "FReal::FReal", "Construct from an expression. This constructor gets called from statements like this, where the right-hand side involves and active data type:"], [13, 2, 1, "_CPPv4N5FReal5FRealERK1TRK1T", "FReal::FReal", "Constructs a new instance of this class, given its initial passive value and derivative."], [13, 2, 1, "_CPPv4N5FReal5FRealERK5FReal", "FReal::FReal", "Copy-constructor"], [13, 2, 1, "_CPPv4N5FReal5FRealERR5FReal", "FReal::FReal", "Move-constructor"], [13, 3, 2, "_CPPv4N5FReal5FRealERK1TRK1T-p-der", "FReal::FReal::der", "Derivative to initialize with (0 if not given)."], [13, 3, 2, "_CPPv4N5FReal5FRealERK10ExpressionI1T4ExprE-p-expr", "FReal::FReal::expr", "The expression to construct from"], [13, 3, 2, "_CPPv4N5FReal5FRealERR5FReal-p-o", "FReal::FReal::o", "Other object to move from"], [13, 3, 2, "_CPPv4N5FReal5FRealERK1TRK1T-p-val", "FReal::FReal::val", "Value to initialize the  the instance with."], [13, 3, 2, "_CPPv4N5FReal5FRealERK5FReal-p-val", "FReal::FReal::val", "Value to initialize the instance with."], [13, 4, 2, "_CPPv4I0E5FReal", "FReal::T", "Defines and active data type version of the underlying type T that tracks derivatives for forward mode differentiation (without tape)"], [13, 2, 1, "_CPPv4N5FReal10derivativeEv", "FReal::derivative", "Get a reference to the stored derivative of this object, i.e., it is assignable."], [13, 2, 1, "_CPPv4NK5FReal10derivativeEv", "FReal::derivative", "Get a const reference to the stored derivative of this object."], [13, 2, 1, "_CPPv4NK5FReal13getDerivativeEv", "FReal::getDerivative", "Get the stored derivative of this object."], [13, 2, 1, "_CPPv4NK5FReal8getValueEv", "FReal::getValue", "Get the value of this object, as the underlying type."], [13, 2, 1, "_CPPv4N5FRealaSERK10ExpressionI1T4ExprE", "FReal::operator=", "Assign an expression"], [13, 2, 1, "_CPPv4N5FRealaSERK1T", "FReal::operator=", "Assign from a passive value. Sets the value to val and the derivative to zero."], [13, 2, 1, "_CPPv4N5FRealaSERK5FReal", "FReal::operator=", "Copy-assign from another FReal object."], [13, 2, 1, "_CPPv4N5FRealaSERR5FReal", "FReal::operator=", "Move-assignment"], [13, 3, 2, "_CPPv4N5FRealaSERK10ExpressionI1T4ExprE-p-expr", "FReal::operator=::expr", "Expression to be assigned to this object."], [13, 3, 2, "_CPPv4N5FRealaSERK1T-p-val", "FReal::operator=::val", "Value to be assigned to this object."], [13, 3, 2, "_CPPv4N5FRealaSERK5FReal-p-val", "FReal::operator=::val", "Value to be assigned to this object."], [13, 3, 2, "_CPPv4N5FRealaSERR5FReal-p-val", "FReal::operator=::val", "Value to be moved into this object"], [13, 2, 1, "_CPPv4N5FReal13setDerivativeERK1T", "FReal::setDerivative", "Sets the derivative of this object. This is the same as calling derivative() = a."], [13, 3, 2, "_CPPv4N5FReal13setDerivativeERK1T-p-a", "FReal::setDerivative::a", "The value to assign to the derivative."], [13, 2, 1, "_CPPv4N5FReal5valueEv", "FReal::value", "Get a reference to the value of this object, i.e. it is assignable"], [13, 2, 1, "_CPPv4NK5FReal5valueEv", "FReal::value", "Get a const reference to the value of this object."], [13, 5, 1, "_CPPv4N5FReal10value_typeE", "FReal::value_type", "The value-type of this class, i.e., T."], [11, 1, 1, "_CPPv415NoTapeException", "NoTapeException", "Exception thrown if an AReal object is created without an active tape for the current thread (debug-mode only)."], [11, 1, 1, "_CPPv410OutOfRange", "OutOfRange", "Exception thrown when an argument is out of the acceptable range."], [19, 1, 1, "_CPPv4I0E21ScopedNestedRecording", "ScopedNestedRecording", "Convenience RAII class to ensure that a call to Tape<T>::newNestedRecording() is always followed by the corresponding Tape<T>::endNestedRecording()."], [19, 2, 1, "_CPPv4N21ScopedNestedRecording21ScopedNestedRecordingEP8TapeType", "ScopedNestedRecording::ScopedNestedRecording", "Start a new nested recording on the given tape and track it with this object."], [19, 3, 2, "_CPPv4N21ScopedNestedRecording21ScopedNestedRecordingEP8TapeType-p-t", "ScopedNestedRecording::ScopedNestedRecording::t", "pointer to the associated tape"], [19, 4, 2, "_CPPv4I0E21ScopedNestedRecording", "ScopedNestedRecording::TapeType", "Convenience RAII class to ensure that a call to Tape<T>::newNestedRecording() is always followed by the corresponding Tape<T>::endNestedRecording()."], [19, 2, 1, "_CPPv4N21ScopedNestedRecording15computeAdjointsEv", "ScopedNestedRecording::computeAdjoints", "Computes adjoints within the nested recording"], [19, 2, 1, "_CPPv4N21ScopedNestedRecording7getTapeEv", "ScopedNestedRecording::getTape", "Returns the underlying tape for this nested recording."], [19, 2, 1, "_CPPv4N21ScopedNestedRecording16incrementAdjointEN8TapeType9slot_typeERKN8TapeType10value_typeE", "ScopedNestedRecording::incrementAdjoint", "Increment the adjoint given by the slot by the given value. See Tape<T>::incrementAdjoint() for details."], [19, 3, 2, "_CPPv4N21ScopedNestedRecording16incrementAdjointEN8TapeType9slot_typeERKN8TapeType10value_typeE", "ScopedNestedRecording::incrementAdjoint::slot", "Increment the adjoint given by the slot by the given value. See Tape<T>::incrementAdjoint() for details."], [19, 3, 2, "_CPPv4N21ScopedNestedRecording16incrementAdjointEN8TapeType9slot_typeERKN8TapeType10value_typeE", "ScopedNestedRecording::incrementAdjoint::value", "Increment the adjoint given by the slot by the given value. See Tape<T>::incrementAdjoint() for details."], [19, 2, 1, "_CPPv4N21ScopedNestedRecordingD0Ev", "ScopedNestedRecording::~ScopedNestedRecording", "Ends the nested recording with the associated tape"], [19, 1, 1, "_CPPv4I0E4Tape", "Tape", "Tape data type to record operations for adjoint computations, using the underlying scalar type T (which may in turn be an active type for higher-order derivative calculations)."], [19, 4, 2, "_CPPv4I0E4Tape", "Tape::T", "Tape data type to record operations for adjoint computations, using the underlying scalar type T (which may in turn be an active type for higher-order derivative calculations)."], [19, 2, 1, "_CPPv4N4Tape4TapeERR4Tape", "Tape::Tape", "Move-constructor."], [19, 2, 1, "_CPPv4N4Tape4TapeEb", "Tape::Tape", "Constructs a new tape, and activates it if needed."], [19, 3, 2, "_CPPv4N4Tape4TapeEb", "Tape::Tape::activate", "Constructs a new tape, and activates it if needed."], [19, 2, 1, "_CPPv4N4Tape8activateEv", "Tape::activate", "Sets a global thread-local pointer to this tape instance, resulting all registerInput calls and operations of active data types depending on such inputs to get associated with this tape instance."], [19, 5, 1, "_CPPv4N4Tape11active_typeE", "Tape::active_type", "Active data type that records on this type of tape"], [19, 5, 1, "_CPPv4N4Tape13callback_typeE", "Tape::callback_type", "The callback type used for checkpoints"], [19, 2, 1, "_CPPv4N4Tape8clearAllEv", "Tape::clearAll", "Clears the stored tape info and brings it back to its initial state."], [19, 2, 1, "_CPPv4N4Tape16clearDerivativesEv", "Tape::clearDerivatives", "Resets all stored derivatives to 0 (but leaving the recorded data in place). This can be used to calculate derivatives w.r.t. multiple outputs, as the same tape can be rolled back multiple times."], [19, 2, 1, "_CPPv4N4Tape21clearDerivativesAfterE13position_type", "Tape::clearDerivativesAfter", "Clears all derivatives after the given position in the tape (resets them to zero). Derivatives before this point keep their value, meaning that further calls to computeAdjoints will potentially increment these adjoints further."], [19, 3, 2, "_CPPv4N4Tape21clearDerivativesAfterE13position_type", "Tape::clearDerivativesAfter::pos", "Clears all derivatives after the given position in the tape (resets them to zero). Derivatives before this point keep their value, meaning that further calls to computeAdjoints will potentially increment these adjoints further."], [19, 2, 1, "_CPPv4N4Tape15computeAdjointsEv", "Tape::computeAdjoints", "Propagates adjoints by interpreting the operations on the tape."], [19, 2, 1, "_CPPv4N4Tape17computeAdjointsToE13position_type", "Tape::computeAdjointsTo", "Like computeAdjoints, but stops rolling back the adjoints at the given position in the tape."], [19, 3, 2, "_CPPv4N4Tape17computeAdjointsToE13position_type", "Tape::computeAdjointsTo::pos", "Like computeAdjoints, but stops rolling back the adjoints at the given position in the tape."], [19, 2, 1, "_CPPv4N4Tape10deactivateEv", "Tape::deactivate", "Resets the global thread-local pointer to NULL, hence deactivating this tape."], [19, 2, 1, "_CPPv4N4Tape10derivativeE9slot_type", "Tape::derivative", "Get a reference to the derivative associated with the slot s."], [19, 2, 1, "_CPPv4NK4Tape10derivativeE9slot_type", "Tape::derivative", "Get a const reference to the derivative associated with the slot s."], [19, 3, 2, "_CPPv4N4Tape10derivativeE9slot_type-p-s", "Tape::derivative::s", "The slot of the derivative"], [19, 3, 2, "_CPPv4NK4Tape10derivativeE9slot_type-p-s", "Tape::derivative::s", "The slot of the derivative"], [19, 2, 1, "_CPPv4N4Tape18endNestedRecordingEv", "Tape::endNestedRecording", "Ends a nested recording."], [19, 2, 1, "_CPPv4N4Tape9getActiveEv", "Tape::getActive", "Get a pointer to the currently active tape."], [19, 2, 1, "_CPPv4N4Tape24getAndResetOutputAdjointE9slot_type", "Tape::getAndResetOutputAdjoint", "Obtains and resets the output adjoint to 0"], [19, 3, 2, "_CPPv4N4Tape24getAndResetOutputAdjointE9slot_type-p-slot", "Tape::getAndResetOutputAdjoint::slot", "The slot of the output variable."], [19, 2, 1, "_CPPv4NK4Tape13getDerivativeE9slot_type", "Tape::getDerivative", "Get the value of the derivative associated with the slot s."], [19, 3, 2, "_CPPv4NK4Tape13getDerivativeE9slot_type-p-s", "Tape::getDerivative::s", "The slot of the derivative"], [19, 2, 1, "_CPPv4N4Tape15getLastCallbackEv", "Tape::getLastCallback", "Obtains the last CheckpointCallback object that has been pushed with pushCallback()."], [19, 2, 1, "_CPPv4NK4Tape9getMemoryEv", "Tape::getMemory", "Returns the memory in bytes that is occupied by the tape."], [19, 2, 1, "_CPPv4NK4Tape15getNumCallbacksEv", "Tape::getNumCallbacks", "Gets the number of callback objects that have been pushed by pushCallback()"], [19, 2, 1, "_CPPv4N4Tape11getPositionEv", "Tape::getPosition", "Returns the current position in the tape as an opaque integer (its value is internal and should not be relied upon in client code). This posiiton can later be used in the methods clearDerivativesAfter, resetTo, and computeAdjointsTo."], [19, 2, 1, "_CPPv4NK4Tape13haveCallbacksEv", "Tape::haveCallbacks", "Checks if there have been any checkpoint callbacks registered by pushCallback()"], [19, 2, 1, "_CPPv4N4Tape16incrementAdjointE9slot_typeRK1T", "Tape::incrementAdjoint", "Increments the adjoint of the given slot by the value x."], [19, 3, 2, "_CPPv4N4Tape16incrementAdjointE9slot_typeRK1T-p-slot", "Tape::incrementAdjoint::slot", "Slot of the input variable to increment"], [19, 3, 2, "_CPPv4N4Tape16incrementAdjointE9slot_typeRK1T-p-x", "Tape::incrementAdjoint::x", "The value to be added to the adjoint"], [19, 2, 1, "_CPPv4N4Tape14insertCallbackE13callback_type", "Tape::insertCallback", "Insert a checkpoint callback into the tape."], [19, 3, 2, "_CPPv4N4Tape14insertCallbackE13callback_type-p-cb", "Tape::insertCallback::cb", "Pointer to a CheckpointCallback instance."], [19, 2, 1, "_CPPv4NK4Tape8isActiveEv", "Tape::isActive", "Check if the current instance is the currently active tape."], [19, 2, 1, "_CPPv4N4Tape18newNestedRecordingEv", "Tape::newNestedRecording", "Starts a new nested recording that can be rolled-back on its own. It must be ended with endNestedRecording()."], [19, 2, 1, "_CPPv4N4Tape12newRecordingEv", "Tape::newRecording", "Start recording derivatives."], [19, 2, 1, "_CPPv4N4TapeaSERR4Tape", "Tape::operator=", "Move-assign."], [19, 2, 1, "_CPPv4N4Tape11popCallbackEv", "Tape::popCallback", "Removes the callback object that has been last pushed by pushCallback()"], [19, 5, 1, "_CPPv4N4Tape13position_typeE", "Tape::position_type", "Type to represent a position in the tape (same as slot_type)"], [19, 2, 1, "_CPPv4NK4Tape11printStatusEv", "Tape::printStatus", "Prints the number of recorded operations, statements, and registered variables to stdout."], [19, 2, 1, "_CPPv4N4Tape12pushCallbackE13callback_type", "Tape::pushCallback", "Let this tape handle the de-allocation of the given callback."], [19, 3, 2, "_CPPv4N4Tape12pushCallbackE13callback_type-p-cb", "Tape::pushCallback::cb", "Pointer to a dynamically-allocated checkpoint callback"], [19, 2, 1, "_CPPv4N4Tape13registerInputER11active_type", "Tape::registerInput", "Register the given variable with the tape and start recording dependents of it. A call to this function or its overloads is required in order to calculate adjoints."], [19, 2, 1, "_CPPv4N4Tape13registerInputERNSt7complexI11active_typeEE", "Tape::registerInput", "Register a complex-valued input."], [19, 3, 2, "_CPPv4N4Tape13registerInputER11active_type", "Tape::registerInput::inp", "Register the given variable with the tape and start recording dependents of it. A call to this function or its overloads is required in order to calculate adjoints."], [19, 3, 2, "_CPPv4N4Tape13registerInputERNSt7complexI11active_typeEE", "Tape::registerInput::inp", "Register a complex-valued input."], [19, 2, 1, "_CPPv4I0EN4Tape14registerInputsEv2It2It", "Tape::registerInputs", "Convenience iterator interface to register variables in a range with the tape."], [19, 2, 1, "_CPPv4I0EN4Tape14registerInputsEvRNSt6vectorI5InnerEE", "Tape::registerInputs", "Convenience function to register all variables in a vector as an input."], [19, 4, 2, "_CPPv4I0EN4Tape14registerInputsEvRNSt6vectorI5InnerEE", "Tape::registerInputs::Inner", "Convenience function to register all variables in a vector as an input."], [19, 4, 2, "_CPPv4I0EN4Tape14registerInputsEv2It2It", "Tape::registerInputs::It", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape14registerInputsEv2It2It", "Tape::registerInputs::first", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape14registerInputsEv2It2It", "Tape::registerInputs::last", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape14registerInputsEvRNSt6vectorI5InnerEE", "Tape::registerInputs::v", "Convenience function to register all variables in a vector as an input."], [19, 2, 1, "_CPPv4N4Tape14registerOutputER11active_type", "Tape::registerOutput", "Register the given variable as an output with the tape. A call to this function or its overloads is required in order to allow seeding derivatives (adjoints)."], [19, 2, 1, "_CPPv4N4Tape14registerOutputERNSt7complexI11active_typeEE", "Tape::registerOutput", "Register a complex-valued output."], [19, 3, 2, "_CPPv4N4Tape14registerOutputER11active_type", "Tape::registerOutput::inp", "Register the given variable as an output with the tape. A call to this function or its overloads is required in order to allow seeding derivatives (adjoints)."], [19, 3, 2, "_CPPv4N4Tape14registerOutputERNSt7complexI11active_typeEE", "Tape::registerOutput::inp", "Register a complex-valued output."], [19, 2, 1, "_CPPv4I0EN4Tape15registerOutputsEv2It2It", "Tape::registerOutputs", "Convenience iterator interface to register variables in a range with the tape."], [19, 2, 1, "_CPPv4I0EN4Tape15registerOutputsEvRNSt6vectorI5InnerEE", "Tape::registerOutputs", "Convenience function to register all variables in a vector as an input."], [19, 4, 2, "_CPPv4I0EN4Tape15registerOutputsEvRNSt6vectorI5InnerEE", "Tape::registerOutputs::Inner", "Convenience function to register all variables in a vector as an input."], [19, 4, 2, "_CPPv4I0EN4Tape15registerOutputsEv2It2It", "Tape::registerOutputs::It", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape15registerOutputsEv2It2It", "Tape::registerOutputs::first", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape15registerOutputsEv2It2It", "Tape::registerOutputs::last", "Convenience iterator interface to register variables in a range with the tape."], [19, 3, 2, "_CPPv4I0EN4Tape15registerOutputsEvRNSt6vectorI5InnerEE", "Tape::registerOutputs::v", "Convenience function to register all variables in a vector as an input."], [19, 2, 1, "_CPPv4N4Tape7resetToE13position_type", "Tape::resetTo", "Resets the tape back to the given position. All statements recorded after this point will be discarded."], [19, 3, 2, "_CPPv4N4Tape7resetToE13position_type", "Tape::resetTo::pos", "Resets the tape back to the given position. All statements recorded after this point will be discarded."], [19, 2, 1, "_CPPv4N4Tape13setDerivativeE9slot_typeRK1T", "Tape::setDerivative", "Set the value of the derivative associated with the slot s."], [19, 3, 2, "_CPPv4N4Tape13setDerivativeE9slot_typeRK1T-p-s", "Tape::setDerivative::s", "The slot of the derivative"], [19, 3, 2, "_CPPv4N4Tape13setDerivativeE9slot_typeRK1T-p-v", "Tape::setDerivative::v", "The value to assign to the derivative"], [19, 5, 1, "_CPPv4N4Tape9size_typeE", "Tape::size_type", "Type for sizes"], [19, 5, 1, "_CPPv4N4Tape9slot_typeE", "Tape::slot_type", "Type used to represent a slot of a specific active variable"], [19, 5, 1, "_CPPv4N4Tape9tape_typeE", "Tape::tape_type", "The tape's type itself - for generic code"], [19, 5, 1, "_CPPv4N4Tape10value_typeE", "Tape::value_type", "The value type of the tape, i.e. T"], [19, 2, 1, "_CPPv4N4TapeD0Ev", "Tape::~Tape", "Destructor."], [11, 1, 1, "_CPPv417TapeAlreadyActive", "TapeAlreadyActive", "Exception that is thrown when a tape is attempted to be activated while another one is already active for the current thread."], [17, 2, 1, "_CPPv43abs1T", "abs", "Computes the absolute value of x."], [17, 3, 2, "_CPPv43abs1T", "abs::x", "Computes the absolute value of x."], [17, 2, 1, "_CPPv44acos1T", "acos", "Computes the inverse cosine of x"], [17, 3, 2, "_CPPv44acos1T", "acos::x", "Computes the inverse cosine of x"], [17, 2, 1, "_CPPv45acosh1T", "acosh", "Computes the inverse hyperbolic cosine of x"], [17, 3, 2, "_CPPv45acosh1T", "acosh::x", "Computes the inverse hyperbolic cosine of x"], [16, 1, 1, "_CPPv4I0E3adj", "adj", "Structure defining the data types for adjoint-mode first order differentiation."], [16, 4, 2, "_CPPv4I0E3adj", "adj::T", "Structure defining the data types for adjoint-mode first order differentiation."], [16, 5, 1, "_CPPv4N3adj11active_typeE", "adj::active_type", "Active data type for adjoint mode differentiation"], [16, 5, 1, "_CPPv4N3adj12passive_typeE", "adj::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N3adj9tape_typeE", "adj::tape_type", "The data type for the tape in adjoint mode"], [16, 5, 1, "_CPPv4N3adj10value_typeE", "adj::value_type", "Same as passive_type"], [16, 1, 1, "_CPPv4I0E7adj_adj", "adj_adj", "Structure defining the data types for second order adjoint-over-adjoint mode."], [16, 4, 2, "_CPPv4I0E7adj_adj", "adj_adj::T", "Structure defining the data types for second order adjoint-over-adjoint mode."], [16, 5, 1, "_CPPv4N7adj_adj11active_typeE", "adj_adj::active_type", "Active data type for adjoint-over-adjoint mode differentiation"], [16, 5, 1, "_CPPv4N7adj_adj15inner_tape_typeE", "adj_adj::inner_tape_type", "Tape type for the second order (inner) differentiation"], [16, 5, 1, "_CPPv4N7adj_adj10inner_typeE", "adj_adj::inner_type", "The type for the inner mode, applied for the second order. In this case this is a adjoint AD type."], [16, 5, 1, "_CPPv4N7adj_adj15outer_tape_typeE", "adj_adj::outer_tape_type", "Tape type for the first order (outer) differentiation"], [16, 5, 1, "_CPPv4N7adj_adj12passive_typeE", "adj_adj::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N7adj_adj10value_typeE", "adj_adj::value_type", "Same as passive_type"], [16, 1, 1, "_CPPv4I0E7adj_fwd", "adj_fwd", "Structure defining the data types for second order adjoint-over-forward mode."], [16, 4, 2, "_CPPv4I0E7adj_fwd", "adj_fwd::T", "Structure defining the data types for second order adjoint-over-forward mode."], [16, 5, 1, "_CPPv4N7adj_fwd11active_typeE", "adj_fwd::active_type", "Active data type for adjoint-over-forward mode differentiation"], [16, 5, 1, "_CPPv4N7adj_fwd10inner_typeE", "adj_fwd::inner_type", "The type for the inner mode, applied for the second order. In this case this is a adjoint AD type."], [16, 5, 1, "_CPPv4N7adj_fwd12passive_typeE", "adj_fwd::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N7adj_fwd9tape_typeE", "adj_fwd::tape_type", "Tape type for adjoint-over-forward mode differentiation"], [16, 5, 1, "_CPPv4N7adj_fwd10value_typeE", "adj_fwd::value_type", "Same as passive_type"], [17, 2, 1, "_CPPv44asin1T", "asin", "Computes the inverse sine of x"], [17, 3, 2, "_CPPv44asin1T", "asin::x", "Computes the inverse sine of x"], [17, 2, 1, "_CPPv45asinh1T", "asinh", "Computes the inverse hyperbolic sine of x"], [17, 3, 2, "_CPPv45asinh1T", "asinh::x", "Computes the inverse hyperbolic sine of x"], [17, 2, 1, "_CPPv44atan1T", "atan", "Computes the inverse tangent of x"], [17, 2, 1, "_CPPv45atan21T1T", "atan2", "Computes the four-quadrant inverse tangent of a point located at (x, y)."], [17, 3, 2, "_CPPv45atan21T1T", "atan2::x", "Computes the four-quadrant inverse tangent of a point located at (x, y)."], [17, 3, 2, "_CPPv45atan21T1T", "atan2::y", "Computes the four-quadrant inverse tangent of a point located at (x, y)."], [17, 3, 2, "_CPPv44atan1T", "atan::x", "Computes the inverse tangent of x"], [17, 2, 1, "_CPPv45atanh1T", "atanh", "Computes the inverse hyperbolic tangent of x"], [17, 3, 2, "_CPPv45atanh1T", "atanh::x", "Computes the inverse hyperbolic tangent of x"], [17, 2, 1, "_CPPv44cbrt1T", "cbrt", "Computes the cubic root of x"], [17, 3, 2, "_CPPv44cbrt1T", "cbrt::x", "Computes the cubic root of x"], [17, 2, 1, "_CPPv44ceil1T", "ceil", "Rounds towards positive infinity"], [17, 3, 2, "_CPPv44ceil1T", "ceil::x", "Rounds towards positive infinity"], [17, 2, 1, "_CPPv43cos1T", "cos", "Computes the cosine of x"], [17, 3, 2, "_CPPv43cos1T", "cos::x", "Computes the cosine of x"], [17, 2, 1, "_CPPv44cosh1T", "cosh", "Computes the hyperbolic cosine of x"], [17, 3, 2, "_CPPv44cosh1T", "cosh::x", "Computes the hyperbolic cosine of x"], [17, 2, 1, "_CPPv47degrees1T", "degrees", "Converts the given value in radians to degrees"], [17, 3, 2, "_CPPv47degrees1T", "degrees::x", "Converts the given value in radians to degrees"], [10, 2, 1, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "derivative", "Returns the adjoints of the z variable, represented as a complex number of the underlying double type."], [10, 2, 1, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "derivative", "Returns the derivatives of the z variable, represented as a complex number of the underlying double type."], [14, 2, 1, "_CPPv410derivativeRK1T", "derivative", "Returns a reference (or const-reference if x is constant) to the derivative stored in x."], [10, 4, 2, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "derivative::T", "Returns the adjoints of the z variable, represented as a complex number of the underlying double type."], [10, 4, 2, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "derivative::T", "Returns the derivatives of the z variable, represented as a complex number of the underlying double type."], [14, 3, 2, "_CPPv410derivativeRK1T-p-x", "derivative::x", "An active or passive variable"], [10, 3, 2, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "derivative::z", "Returns the adjoints of the z variable, represented as a complex number of the underlying double type."], [10, 3, 2, "_CPPv4I0E10derivativeNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "derivative::z", "Returns the derivatives of the z variable, represented as a complex number of the underlying double type."], [17, 2, 1, "_CPPv43erf1T", "erf", "Computes the error function of x, if provided by the compiler's math library."], [17, 3, 2, "_CPPv43erf1T", "erf::x", "Computes the error function of x, if provided by the compiler's math library."], [17, 2, 1, "_CPPv44erfc1T", "erfc", "Computes the complementary error function of x, if provided by the compiler's math library."], [17, 3, 2, "_CPPv44erfc1T", "erfc::x", "Computes the complementary error function of x, if provided by the compiler's math library."], [17, 2, 1, "_CPPv43exp1T", "exp", "Computes the exponential of x (base e)"], [17, 2, 1, "_CPPv44exp21T", "exp2", "Computes 2 to the power of x"], [17, 3, 2, "_CPPv44exp21T", "exp2::x", "Computes 2 to the power of x"], [17, 3, 2, "_CPPv43exp1T", "exp::x", "Computes the exponential of x (base e)"], [17, 2, 1, "_CPPv45expm11T", "expm1", "Computes exp(x) - 1 with higher precision around 0"], [17, 3, 2, "_CPPv45expm11T", "expm1::x", "Computes exp(x) - 1 with higher precision around 0"], [17, 2, 1, "_CPPv45floor1T", "floor", "Rounds towards negative infinity"], [17, 3, 2, "_CPPv45floor1T", "floor::x", "Rounds towards negative infinity"], [17, 2, 1, "_CPPv44fmax1T1T", "fmax", "Synonym for max()"], [17, 3, 2, "_CPPv44fmax1T1T", "fmax::x", "Synonym for max()"], [17, 3, 2, "_CPPv44fmax1T1T", "fmax::y", "Synonym for max()"], [17, 2, 1, "_CPPv44fmin1T1T", "fmin", "Synonym for min()"], [17, 3, 2, "_CPPv44fmin1T1T", "fmin::x", "Synonym for min()"], [17, 3, 2, "_CPPv44fmin1T1T", "fmin::y", "Synonym for min()"], [17, 2, 1, "_CPPv44fmod1T1T", "fmod", "The floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where n is x/y with its fractional part truncated."], [17, 3, 2, "_CPPv44fmod1T1T", "fmod::x", "The floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where n is x/y with its fractional part truncated."], [17, 3, 2, "_CPPv44fmod1T1T", "fmod::y", "The floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where n is x/y with its fractional part truncated."], [17, 2, 1, "_CPPv45frexp1TPi", "frexp", "Decomposes the given floating point value arg into a normalised fraction and an integral power of two."], [17, 3, 2, "_CPPv45frexp1TPi", "frexp::arg", "Decomposes the given floating point value arg into a normalised fraction and an integral power of two."], [17, 3, 2, "_CPPv45frexp1TPi", "frexp::exp", "Decomposes the given floating point value arg into a normalised fraction and an integral power of two."], [16, 1, 1, "_CPPv4I0E3fwd", "fwd", "Structure defining the data types for forward-mode (tangent-linear) first order differentiation."], [16, 4, 2, "_CPPv4I0E3fwd", "fwd::T", "Structure defining the data types for forward-mode (tangent-linear) first order differentiation."], [16, 5, 1, "_CPPv4N3fwd11active_typeE", "fwd::active_type", "Active data type for forward-mode differentiation"], [16, 5, 1, "_CPPv4N3fwd12passive_typeE", "fwd::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N3fwd9tape_typeE", "fwd::tape_type", "As forward mode does not require a tape, this is defined to void"], [16, 5, 1, "_CPPv4N3fwd10value_typeE", "fwd::value_type", "Same as passive_type"], [16, 1, 1, "_CPPv4I0E7fwd_adj", "fwd_adj", "Structure defining the data types for second order forward-over-adjoint mode."], [16, 4, 2, "_CPPv4I0E7fwd_adj", "fwd_adj::T", "Structure defining the data types for second order forward-over-adjoint mode."], [16, 5, 1, "_CPPv4N7fwd_adj11active_typeE", "fwd_adj::active_type", "Active data type for forward-over-adjoint mode differentiation"], [16, 5, 1, "_CPPv4N7fwd_adj10inner_typeE", "fwd_adj::inner_type", "The type for the inner mode, applied for the second order. In this case this is a forward AD type."], [16, 5, 1, "_CPPv4N7fwd_adj12passive_typeE", "fwd_adj::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N7fwd_adj9tape_typeE", "fwd_adj::tape_type", "Tape type for forward-over-adjoint mode differentiation"], [16, 5, 1, "_CPPv4N7fwd_adj10value_typeE", "fwd_adj::value_type", "Same as passive_type"], [16, 1, 1, "_CPPv4I0E7fwd_fwd", "fwd_fwd", "Structure defining the data types for second order forward-over-forward mode."], [16, 4, 2, "_CPPv4I0E7fwd_fwd", "fwd_fwd::T", "Structure defining the data types for second order forward-over-forward mode."], [16, 5, 1, "_CPPv4N7fwd_fwd11active_typeE", "fwd_fwd::active_type", "Active data type for forward-over-forward mode differentiation"], [16, 5, 1, "_CPPv4N7fwd_fwd10inner_typeE", "fwd_fwd::inner_type", "The type for the inner mode, applied for the second order. In this case this is a forward AD type."], [16, 5, 1, "_CPPv4N7fwd_fwd12passive_typeE", "fwd_fwd::passive_type", "Passive data type"], [16, 5, 1, "_CPPv4N7fwd_fwd9tape_typeE", "fwd_fwd::tape_type", "As not tape is required in this mode, this is defined as void"], [16, 5, 1, "_CPPv4N7fwd_fwd10value_typeE", "fwd_fwd::value_type", "Same as passive_type"], [17, 2, 1, "_CPPv45ilogb1T", "ilogb", "Returns the integral part of the logarithm of abs(x), using FLT_RADIX as base for the log."], [17, 3, 2, "_CPPv45ilogb1T", "ilogb::arg", "Returns the integral part of the logarithm of abs(x), using FLT_RADIX as base for the log."], [10, 2, 1, "_CPPv4I0E4imagR5ARealI1TERNSt7complexI5ARealI1TEEE", "imag", "Access to the imaginary part by reference."], [10, 2, 1, "_CPPv4I0E4imagR5FRealI1TERNSt7complexI5FRealI1TEEE", "imag", "Access to the imaginary part by reference."], [10, 4, 2, "_CPPv4I0E4imagR5ARealI1TERNSt7complexI5ARealI1TEEE", "imag::T", "Access to the imaginary part by reference."], [10, 4, 2, "_CPPv4I0E4imagR5FRealI1TERNSt7complexI5FRealI1TEEE", "imag::T", "Access to the imaginary part by reference."], [10, 3, 2, "_CPPv4I0E4imagR5ARealI1TERNSt7complexI5ARealI1TEEE", "imag::z", "Access to the imaginary part by reference."], [10, 3, 2, "_CPPv4I0E4imagR5FRealI1TERNSt7complexI5FRealI1TEEE", "imag::z", "Access to the imaginary part by reference."], [17, 2, 1, "_CPPv48isfinite1T", "isfinite", "Check if value is finite (not infinite and not NaN)"], [17, 3, 2, "_CPPv48isfinite1T", "isfinite::x", "Check if value is finite (not infinite and not NaN)"], [17, 2, 1, "_CPPv45isinf1T", "isinf", "Check if value is infinity (positive or negative)"], [17, 3, 2, "_CPPv45isinf1T", "isinf::x", "Check if value is infinity (positive or negative)"], [17, 2, 1, "_CPPv45isnan1T", "isnan", "Check if value is NaN"], [17, 3, 2, "_CPPv45isnan1T", "isnan::x", "Check if value is NaN"], [17, 2, 1, "_CPPv48isnormal1T", "isnormal", "Checks if the value is a normal floating point number, i.e. not zero, subnormal, infinite, or NaN."], [17, 3, 2, "_CPPv48isnormal1T", "isnormal::x", "Checks if the value is a normal floating point number, i.e. not zero, subnormal, infinite, or NaN."], [17, 2, 1, "_CPPv45ldexp1Ti", "ldexp", "Multiplies x by two to the power of exp"], [17, 3, 2, "_CPPv45ldexp1Ti", "ldexp::exp", "Multiplies x by two to the power of exp"], [17, 3, 2, "_CPPv45ldexp1Ti", "ldexp::x", "Multiplies x by two to the power of exp"], [17, 2, 1, "_CPPv47llround1T", "llround", "Like round(), but converting the result to a long long type."], [17, 3, 2, "_CPPv47llround1T", "llround::x", "Like round(), but converting the result to a long long type."], [17, 2, 1, "_CPPv43log1T", "log", "Computes the natural logarithm of x"], [17, 2, 1, "_CPPv45log101T", "log10", "Computes the base 10 logarithm of x"], [17, 3, 2, "_CPPv45log101T", "log10::x", "Computes the base 10 logarithm of x"], [17, 2, 1, "_CPPv45log1p1T", "log1p", "Computes log(1 + x) with higher precision around 0"], [17, 3, 2, "_CPPv45log1p1T", "log1p::x", "Computes log(1 + x) with higher precision around 0"], [17, 2, 1, "_CPPv44log21T", "log2", "Computes the base 2 logarithm of x"], [17, 3, 2, "_CPPv44log21T", "log2::x", "Computes the base 2 logarithm of x"], [17, 3, 2, "_CPPv43log1T", "log::x", "Computes the natural logarithm of x"], [17, 2, 1, "_CPPv46lround1T", "lround", "Like round(), but converting the result to a long type."], [17, 3, 2, "_CPPv46lround1T", "lround::x", "Like round(), but converting the result to a long type."], [17, 2, 1, "_CPPv43max1T1T", "max", "Returns the maximum of x and y."], [17, 3, 2, "_CPPv43max1T1T", "max::x", "Returns the maximum of x and y."], [17, 3, 2, "_CPPv43max1T1T", "max::y", "Returns the maximum of x and y."], [17, 2, 1, "_CPPv43min1T1T", "min", "Returns the minimum of x and y."], [17, 3, 2, "_CPPv43min1T1T", "min::x", "Returns the minimum of x and y."], [17, 3, 2, "_CPPv43min1T1T", "min::y", "Returns the minimum of x and y."], [17, 2, 1, "_CPPv44modf1TP1T", "modf", "Decomposes x into integral and fractional parts, each with the same type and sign as x. The integral part is stored in iptr."], [17, 3, 2, "_CPPv44modf1TP1T", "modf::iptr", "Decomposes x into integral and fractional parts, each with the same type and sign as x. The integral part is stored in iptr."], [17, 3, 2, "_CPPv44modf1TP1T", "modf::x", "Decomposes x into integral and fractional parts, each with the same type and sign as x. The integral part is stored in iptr."], [17, 2, 1, "_CPPv49nextafter1T1T", "nextafter", "Returns the next representable value of from in the direction of to."], [17, 3, 2, "_CPPv49nextafter1T1T", "nextafter::from", "Returns the next representable value of from in the direction of to."], [17, 3, 2, "_CPPv49nextafter1T1T", "nextafter::to", "Returns the next representable value of from in the direction of to."], [17, 2, 1, "_CPPv43pow1T1T", "pow", "Computes x to the power of y"], [17, 3, 2, "_CPPv43pow1T1T", "pow::x", "Computes x to the power of y"], [17, 3, 2, "_CPPv43pow1T1T", "pow::y", "Computes x to the power of y"], [17, 2, 1, "_CPPv47radians1T", "radians", "Converts the given value in degrees to radians"], [17, 3, 2, "_CPPv47radians1T", "radians::x", "Converts the given value in degrees to radians"], [10, 2, 1, "_CPPv4I0E4realR5ARealI1TERNSt7complexI5ARealI1TEEE", "real", "Access to the real part by reference."], [10, 2, 1, "_CPPv4I0E4realR5FRealI1TERNSt7complexI5FRealI1TEEE", "real", "Access to the real part by reference."], [10, 4, 2, "_CPPv4I0E4realR5ARealI1TERNSt7complexI5ARealI1TEEE", "real::T", "Access to the real part by reference."], [10, 4, 2, "_CPPv4I0E4realR5FRealI1TERNSt7complexI5FRealI1TEEE", "real::T", "Access to the real part by reference."], [10, 3, 2, "_CPPv4I0E4realR5ARealI1TERNSt7complexI5ARealI1TEEE", "real::z", "Access to the real part by reference."], [10, 3, 2, "_CPPv4I0E4realR5FRealI1TERNSt7complexI5FRealI1TEEE", "real::z", "Access to the real part by reference."], [17, 2, 1, "_CPPv49remainder1T1T", "remainder", "The IEEE floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where the value n is the integral value nearest the exact value x/y. When abs(n-x/y) = 0.5, the value n is chosen to be even."], [17, 3, 2, "_CPPv49remainder1T1T", "remainder::x", "The IEEE floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where the value n is the integral value nearest the exact value x/y. When abs(n-x/y) = 0.5, the value n is chosen to be even."], [17, 3, 2, "_CPPv49remainder1T1T", "remainder::y", "The IEEE floating-point remainder of the division operation x/y, i.e. exactly the value x - n*y, where the value n is the integral value nearest the exact value x/y. When abs(n-x/y) = 0.5, the value n is chosen to be even."], [17, 2, 1, "_CPPv46remquo1T1TPi", "remquo", "Same as remainer(), but returns the integer factor n in addition."], [17, 3, 2, "_CPPv46remquo1T1TPi", "remquo::n", "Same as remainer(), but returns the integer factor n in addition."], [17, 3, 2, "_CPPv46remquo1T1TPi", "remquo::x", "Same as remainer(), but returns the integer factor n in addition."], [17, 3, 2, "_CPPv46remquo1T1TPi", "remquo::y", "Same as remainer(), but returns the integer factor n in addition."], [17, 2, 1, "_CPPv45round1T", "round", "Round to the nearest integer value"], [17, 3, 2, "_CPPv45round1T", "round::x", "Round to the nearest integer value"], [17, 2, 1, "_CPPv46scalbn1Ti", "scalbn", "Calculates arg * pow(FLT_RADIX, exp)."], [17, 3, 2, "_CPPv46scalbn1Ti", "scalbn::arg", "Calculates arg * pow(FLT_RADIX, exp)."], [17, 3, 2, "_CPPv46scalbn1Ti", "scalbn::exp", "Calculates arg * pow(FLT_RADIX, exp)."], [17, 2, 1, "_CPPv47signbit1T", "signbit", "Returns true if x is negative and false otherwise. Also detects sign bit of zeros."], [17, 3, 2, "_CPPv47signbit1T", "signbit::x", "Returns true if x is negative and false otherwise. Also detects sign bit of zeros."], [17, 2, 1, "_CPPv43sin1T", "sin", "Computes the sine of x"], [17, 3, 2, "_CPPv43sin1T", "sin::x", "Computes the sine of x"], [17, 2, 1, "_CPPv44sinh1T", "sinh", "Computes the hyperbolic sine of x"], [17, 3, 2, "_CPPv44sinh1T", "sinh::x", "Computes the hyperbolic sine of x"], [18, 2, 1, "_CPPv410smooth_abs1T1T", "smooth_abs", "Smoothed version of abs(), defined as:"], [18, 3, 2, "_CPPv410smooth_abs1T1T-p-c", "smooth_abs::c", "Cut-off point for the spline-approximated area (default: 0.001)"], [18, 3, 2, "_CPPv410smooth_abs1T1T-p-x", "smooth_abs::x", "The input value"], [18, 2, 1, "_CPPv410smooth_max1T1T1T", "smooth_max", "Smoothed version of the max(), defined as:"], [18, 3, 2, "_CPPv410smooth_max1T1T1T-p-c", "smooth_max::c", "Cut-off point for the spline-approximated area (default: 0.001)"], [18, 3, 2, "_CPPv410smooth_max1T1T1T-p-x", "smooth_max::x", "First argument to max"], [18, 3, 2, "_CPPv410smooth_max1T1T1T-p-y", "smooth_max::y", "Second argument to max"], [18, 2, 1, "_CPPv410smooth_min1T1T1T", "smooth_min", "Smoothed version of the min(), defined as:"], [18, 3, 2, "_CPPv410smooth_min1T1T1T-p-c", "smooth_min::c", "Cut-off point for the spline-approximated area (default: 0.001)"], [18, 3, 2, "_CPPv410smooth_min1T1T1T-p-x", "smooth_min::x", "First argument to min"], [18, 3, 2, "_CPPv410smooth_min1T1T1T-p-y", "smooth_min::y", "Second argument to min"], [17, 2, 1, "_CPPv44sqrt1T", "sqrt", "Computes the square root of x"], [17, 3, 2, "_CPPv44sqrt1T", "sqrt::x", "Computes the square root of x"], [10, 1, 1, "_CPPv4I0ENSt7complexI5ARealI1TEEE", "std::complex&lt;AReal&lt;T&gt;&gt;", "Specialisation for adjoint mode data type (in std namespace)."], [10, 4, 2, "_CPPv4I0ENSt7complexI5ARealI1TEEE", "std::complex&lt;AReal&lt;T&gt;&gt;::T", "Specialisation for adjoint mode data type (in std namespace)."], [10, 2, 1, "_CPPv4NKSt7complexI5ARealI1TEE10getAdjointEv", "std::complex&lt;AReal&lt;T&gt;&gt;::getAdjoint", "Alias for getDerivative()"], [10, 2, 1, "_CPPv4NKSt7complexI5ARealI1TEE13getDerivativeEv", "std::complex&lt;AReal&lt;T&gt;&gt;::getDerivative", "Gets the derivatives (either \\dot{x} or \\bar{x}) for both the real and imaginary parts, represented as a complex of the underlying (double) type."], [10, 2, 1, "_CPPv4NKSt7complexI5ARealI1TEE4imagEv", "std::complex&lt;AReal&lt;T&gt;&gt;::imag", "Returns a reference rather than a copy."], [10, 2, 1, "_CPPv4NSt7complexI5ARealI1TEE4imagEv", "std::complex&lt;AReal&lt;T&gt;&gt;::imag", "Returns a reference rather than a copy."], [10, 2, 1, "_CPPv4NKSt7complexI5ARealI1TEE4realEv", "std::complex&lt;AReal&lt;T&gt;&gt;::real", "Returns a reference rather than a copy."], [10, 2, 1, "_CPPv4NSt7complexI5ARealI1TEE4realEv", "std::complex&lt;AReal&lt;T&gt;&gt;::real", "This function returns a reference rather than a copy of the real part, to allow for easy access and adjusting of derivatives using derivative()."], [10, 2, 1, "_CPPv4NSt7complexI5ARealI1TEE10setAdjointERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setAdjoint", "Alias for setDerivative()"], [10, 3, 2, "_CPPv4NSt7complexI5ARealI1TEE10setAdjointERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setAdjoint::imag_derivative", "Alias for setDerivative()"], [10, 3, 2, "_CPPv4NSt7complexI5ARealI1TEE10setAdjointERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setAdjoint::real_derivative", "Alias for setDerivative()"], [10, 2, 1, "_CPPv4NSt7complexI5ARealI1TEE13setDerivativeERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setDerivative", "Sets the derivatives (either \\dot{x} or \\bar{x}) for both the real and imaginary parts."], [10, 3, 2, "_CPPv4NSt7complexI5ARealI1TEE13setDerivativeERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setDerivative::imag_derivative", "Sets the derivatives (either \\dot{x} or \\bar{x}) for both the real and imaginary parts."], [10, 3, 2, "_CPPv4NSt7complexI5ARealI1TEE13setDerivativeERK1TRK1T", "std::complex&lt;AReal&lt;T&gt;&gt;::setDerivative::real_derivative", "Sets the derivatives (either \\dot{x} or \\bar{x}) for both the real and imaginary parts."], [10, 1, 1, "_CPPv4I0ENSt7complexI5FRealI1TEEE", "std::complex&lt;FReal&lt;T&gt;&gt;", "Specialisation for forward mode data type (in std namespace)."], [10, 4, 2, "_CPPv4I0ENSt7complexI5FRealI1TEEE", "std::complex&lt;FReal&lt;T&gt;&gt;::T", "Specialisation for forward mode data type (in std namespace)."], [17, 2, 1, "_CPPv43tan1T", "tan", "Computes the tangent of x"], [17, 3, 2, "_CPPv43tan1T", "tan::x", "Computes the tangent of x"], [17, 2, 1, "_CPPv44tanh1T", "tanh", "Computes the tangent of x"], [17, 3, 2, "_CPPv44tanh1T", "tanh::x", "Computes the tangent of x"], [17, 2, 1, "_CPPv45trunc1T", "trunc", "Rounds towards 0"], [17, 3, 2, "_CPPv45trunc1T", "trunc::x", "Rounds towards 0"], [10, 2, 1, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "value", "Returns the value of the z variable (underlying double type), represented as a complex number."], [10, 2, 1, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "value", "Returns the value of the z variable (underlying double type), represented as a complex number."], [14, 2, 1, "_CPPv45valueR1T", "value", "Returns a reference (or const-reference if x is constant) to the value stored in x."], [10, 4, 2, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "value::T", "Returns the value of the z variable (underlying double type), represented as a complex number."], [10, 4, 2, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "value::T", "Returns the value of the z variable (underlying double type), represented as a complex number."], [14, 3, 2, "_CPPv45valueR1T-p-x", "value::x", "An active or passive variable"], [10, 3, 2, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5ARealI1TEEE", "value::z", "Returns the value of the z variable (underlying double type), represented as a complex number."], [10, 3, 2, "_CPPv4I0E5valueNSt7complexI1TEERKNSt7complexI5FRealI1TEEE", "value::z", "Returns the value of the z variable (underlying double type), represented as a complex number."]]}, "objtypes": {"0": "c:macro", "1": "cpp:class", "2": "cpp:function", "3": "cpp:functionParam", "4": "cpp:templateTypeParam", "5": "cpp:type", "6": "cpp:enumerator", "7": "cpp:enum", "8": "cpp:member"}, "objnames": {"0": ["c", "macro", "C macro"], "1": ["cpp", "class", "C++ class"], "2": ["cpp", "function", "C++ function"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "templateTypeParam", "C++ type template parameter"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enumerator", "C++ enumerator"], "7": ["cpp", "enum", "C++ enum"], "8": ["cpp", "member", "C++ member"]}, "titleterms": {"algorithm": [0, 2, 3, 4], "differenti": 0, "background": 0, "finit": 0, "differ": 0, "forward": [0, 1, 3, 4, 13], "mode": [0, 1, 3, 4, 8, 13, 16], "theori": 0, "exampl": [0, 2, 3, 4], "adjoint": [0, 1, 3, 4, 8], "higher": [0, 4], "order": [0, 4, 16], "basic": 1, "usag": [1, 2], "prerequisit": 1, "replac": 1, "activ": 1, "variabl": 1, "best": 1, "practic": 1, "checkpoint": [2, 19], "callback": [2, 19], "computestag": 2, "method": [2, 3], "computeadjoint": [2, 3], "call": [2, 3], "site": [2, 3], "other": [2, 4, 8, 13], "pattern": 2, "extern": 3, "function": [3, 10, 14, 17, 18], "For": 3, "computeextern": 3, "wrapper": 3, "deriv": [4, 8, 13, 19], "over": 4, "second": [4, 16], "xad": 5, "user": 5, "manual": 5, "introduct": 6, "gnu": 7, "free": 7, "document": 7, "licens": 7, "type": [8, 13, 19], "areal": 8, "overview": [8, 10, 13, 19], "member": [8, 10, 13, 19], "construct": [8, 13, 19], "destruct": [8, 13, 19], "assign": [8, 13, 19], "valu": [8, 13, 17], "oper": [8, 10, 13, 17], "checkpointcallback": 9, "complex": 10, "non": 10, "math": 10, "except": 11, "express": 12, "templat": 12, "trait": 12, "freal": 13, "global": 14, "header": 15, "namespac": 15, "ad": 16, "interfac": 16, "first": 16, "mathemat": [17, 18], "absolut": 17, "max": 17, "min": 17, "round": 17, "trigonometr": 17, "power": 17, "exponenti": 17, "logarithm": 17, "error": 17, "float": 17, "point": 17, "classif": 17, "smooth": 18, "tape": 19, "record": 19, "control": 19, "statu": 19, "memori": 19, "manag": 19, "nest": 19, "version": 20, "inform": 20, "refer": 21, "handl": 22, "discontinu": 22}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 56}, "docurls": ["aad.html", "basic.html", "checkpointing.html", "external_functions.html", "higher_order.html", "index.html", "intro.html", "license.html", "ref/areal.html", "ref/chkpt_cb.html", "ref/complex.html", "ref/exceptions.html", "ref/expression.html", "ref/freal.html", "ref/global.html", "ref/headers.html", "ref/interface.html", "ref/math.html", "ref/smooth-math.html", "ref/tape.html", "ref/version.html", "reference.html", "smoothed_math.html"]})